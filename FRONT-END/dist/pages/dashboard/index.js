import KanbanBoardApi from"../../services/KanbanBoardApi.js";import{COLUMN_STATUS}from"../../utils/constants.js";class Dashboard{constructor(){this.todoList=document.querySelector("#todoList"),this.inProgressList=document.querySelector("#inProgressList"),this.doneList=document.querySelector("#doneList"),this.taskList=[],this.draggedItems=document.getElementsByClassName("draggableItem"),this.listColumns=document.querySelectorAll(".drag-item-list"),this.createForm=document.querySelector("#newTaskForm"),this.updateForm=document.querySelector("#updateForm"),this.draggedItem="<li></li>",this.dragging=!1,this.getAllTasksFromApi()}addCreateFormSubmitEventListener(){this.createForm.addEventListener("submit",this.onSubmitCreateForm.bind(this))}async onSubmitCreateForm(t){if(t.preventDefault(),t.stopImmediatePropagation(),console.log("onSubmitCreateForm called"),!this.createForm.taskSummary.value)return void alert("Task Summary is a required field");""===this.createForm.status.value&&(this.createForm.status.value="TO_DO");const e={taskSummary:this.createForm.taskSummary.value,acceptanceCriteria:this.createForm.acceptanceCriteria.value,status:this.createForm.status.value};await KanbanBoardApi.createNewTask(e),await this.getAllTasksFromApi(),this.clearFieldsAfterSubmit()}clearFieldsAfterSubmit(){this.createForm.taskSummary.value="",this.createForm.acceptanceCriteria.value="",this.createForm.status.value=""}async getAllTasksFromApi(){try{const t=await KanbanBoardApi.getAllTasks();this.taskList=this.checkBackend(t)}catch(t){console.log(t)}this.render()}viewUpdateEventListener(){this.todoList.addEventListener("click",(t=>{this.renderViewUpdateForm(t,this.updateForm)})),this.inProgressList.addEventListener("click",(t=>{this.renderViewUpdateForm(t,this.updateForm)})),this.doneList.addEventListener("click",(t=>{this.renderViewUpdateForm(t,this.updateForm)}))}async renderViewUpdateForm(t){if(t.target.classList.contains("view-button")){t.stopImmediatePropagation();const e=t.target.parentElement.dataset.id,a=await KanbanBoardApi.getTaskById(e);console.log("taskToUpdate ",a.data.data),this.renderViewUpdateTaskForm(a),this.updateForm.addEventListener("submit",this.onUpdateSubmit.bind(this))}}renderViewUpdateTaskForm=t=>{t=this.checkBackend(t),this.updateForm.taskSummary.value=t.taskSummary,this.updateForm.acceptanceCriteria.value=t.acceptanceCriteria,this.updateForm.status.value=t.status,this.updateForm._id.value=t._id};async onUpdateSubmit(t){if(t.preventDefault(),!this.updateForm.taskSummary.value)return void alert("Task Summary is a required field");const e={taskSummary:this.updateForm.taskSummary.value,acceptanceCriteria:this.updateForm.acceptanceCriteria.value,status:this.updateForm.status.value},a=this.updateForm._id.value;await KanbanBoardApi.updateTask(a,e),this.getAllTasksFromApi()}deleteTaskOnClick(t){if(t.target.classList.contains("btn-danger")){t.stopImmediatePropagation();const e=t.target.parentElement.dataset.id;this.onDelete(e)}}deleteEventListener(){this.todoList.addEventListener("click",(t=>{this.deleteTaskOnClick(t)})),this.inProgressList.addEventListener("click",(t=>{this.deleteTaskOnClick(t)})),this.doneList.addEventListener("click",(t=>{this.deleteTaskOnClick(t)}))}async onDelete(t){if(window.confirm(`You are deleting project task ${t}, this action cannot be undone`))try{await KanbanBoardApi.deleteTask(t),await this.getAllTasksFromApi()}catch(t){alert("Unable to delete the task at this time")}}checkBackend=t=>{let e;return e=t.data.data?t.data.data:t.data,e};createTaskList=()=>{[{status:COLUMN_STATUS.TO_DO_STATUS,tag:this.todoList},{status:COLUMN_STATUS.IN_PROGRESS_STATUS,tag:this.inProgressList},{status:COLUMN_STATUS.DONE_STATUS,tag:this.doneList}].forEach((t=>{let e=this.taskList.filter((e=>e.status===t.status)).sort(((t,e)=>t.hierarchy-e.hierarchy));t?.tag&&(t.tag.innerHTML=e.map((t=>this.createTaskCard(t))).join(""))}))};createTaskCard=t=>`\n          <li draggable="true"  class="draggableItem">\n           <div class="card project-task">\n               <h5 class="card-header">Task ID: ${t._id}</h5>\n  \n               <div class="card-body" data-id="${t._id}">\n                 <h5 class="card-title">${t.taskSummary}</h5>\n                 <a href="" type="button"\n          class="btn btn-primary view-button"\n          data-bs-toggle="modal"\n          data-bs-target="#viewUpdateTaskModal">View / Update</a>\n                 <button class="btn btn-danger">Delete</button>\n               </div>\n  \n             </div>\n           </li> \n     \n     `;updateTaskOnBoard=t=>{this.getAllTasksFromApi()};dragEventListener(){Array.from(this.draggedItems).map((t=>t.addEventListener("dragstart",(t=>{this.dragTask(t)}))))}dragTask=t=>{t.target.classList.contains("draggableItem")&&(t.stopImmediatePropagation(),this.draggedItem=t.target,this.draggedItem.classList.add("dragging"),this.dragging=!0)};allowDropEventListener(){this.listColumns.forEach((t=>{t.addEventListener("dragover",(t=>this.allowDrop(t))),t.addEventListener("dragenter",(e=>this.dragEnter(t))),t.addEventListener("drop",(e=>this.drop(e,t)))}))}allowDrop=t=>{t.preventDefault()};dragEnter(t){this.currentColumn=t}drop=async(t,e)=>{if(t.preventDefault(),!this.dragging)return;const a=this.getDragAfterElements(e,t.clientY);a?e.insertBefore(this.draggedItem,a):e.appendChild(this.draggedItem),this.dragging=!1,this.draggedItem.classList.remove("dragging");const s=this.draggedItem.querySelector(".card-body").dataset.id;await this.arrangeNewHierarchyInNewColumn(t,{todoList:"TO_DO",inProgressList:"IN_PROGRESS",doneList:"DONE"},e),await this.arrangeNewHierarchyInPreviousColumn(s,{TO_DO:"todoList",IN_PROGRESS:"inProgressList",DONE:"doneList"})};getDragAfterElements=(t,e)=>{let a=[...t.querySelectorAll(".draggableItem:not(.dragging)")];return console.log("draggableElements",a,"Y",e),a.reduce(((t,a)=>{const s=a.getBoundingClientRect(),r=e-s.top-s.height/2;return console.log("offset",r),r<0&&r>t.offset?{offset:r,element:a}:t}),{offset:Number.NEGATIVE_INFINITY}).element};reArrangeTasks=t=>{let e=[];return Array.from(t.children).forEach(((t,a)=>{let s=t.querySelector(".card-body").dataset.id,r=this.taskList.find((t=>t._id===s));r.hierarchy=a+1,e.push(r)})),e};async arrangeNewHierarchyInPreviousColumn(t,e){const a=this.taskList.find((e=>e._id===t)),s=document.getElementById(e[a.status]),r=this.reArrangeTasks(s);if(r.length)try{await KanbanBoardApi.updateBulkTasks({tasks:r})}catch(t){console.error("Failed to update previous list tasks:",t)}}async arrangeNewHierarchyInNewColumn(t,e,a){const s=e[t.target.id||t.target.closest(".drag-item-list").id],r=this.reArrangeTasks(a);try{await KanbanBoardApi.updateBulkTasks({tasks:r.map((t=>({...t,status:s})))}),console.log("Tasks updated successfully")}catch(t){console.error("Failed to update tasks:",t)}}render(){this.createTaskList(),this.allowDropEventListener(),this.dragEventListener(),this.deleteEventListener(),this.addCreateFormSubmitEventListener(),this.viewUpdateEventListener()}}export default Dashboard;